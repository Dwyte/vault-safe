{"version":3,"sources":["components/todoItem.jsx","components/todoForm.jsx","services/httpServices.js","services/vaultServices.js","components/todo.jsx","components/login.jsx","components/register.jsx","components/footer.jsx","App.js","serviceWorker.js","index.js"],"names":["TodoItem","_ref","todo","completeTodo","removeTodo","react_default","a","createElement","className","style","textDecoration","completed","title","onClick","_id","TodoForm","addTodo","_useState","useState","_useState2","Object","slicedToArray","value","setValue","onSubmit","e","preventDefault","type","placeholder","maxLength","autoFocus","onChange","target","httpServices","get","axios","put","post","delete","postVault","asyncToGenerator","regenerator_default","mark","_callee","vault","wrap","_context","prev","next","http","abrupt","sent","stop","_x","apply","this","arguments","validateUserHash","_ref2","_callee2","userHash","_context2","concat","_x2","getVault","_ref3","_callee3","auth","_context3","_x3","updateVault","_ref4","_callee4","data","_context4","_x4","_x5","AES","CryptoJS","Todo","props","todos","setTodos","useEffect","_JSON$parse","JSON","parse","localStorage","getItem","vaultKey","decrypt","toString","enc","Utf8","saveVault","_JSON$parse2","encrypt","stringify","setItem","t0","alert","newTodos","toConsumableArray","find","t","splice","indexOf","Fragment","map","index","todoItem","key","todoForm","nanoid","removeItem","href","SHA256","Login","userName","setUserName","_useState3","_useState4","password","setPassword","handleSubmit","vaultAccount","window","location","replace","Register","history","push","Footer","App","Boolean","react_router","path","component","from","to","form","exact","footer","hostname","match","ReactDOM","render","react_router_dom","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.784e4253.chunk.js","sourcesContent":["import React from \"react\";\n\nconst TodoItem = ({ todo, completeTodo, removeTodo }) => {\n  return (\n    <div\n      className=\"todo mb\"\n      style={{ textDecoration: todo.completed ? \"line-through\" : \"none\" }}\n    >\n      {todo.title}\n      <div>\n        <button onClick={() => completeTodo(todo._id)}>Done</button>\n        <button onClick={() => removeTodo(todo._id)}>x</button>\n      </div>\n    </div>\n  );\n};\n\nexport default TodoItem;\n","import React, { useState } from \"react\";\n\nconst TodoForm = ({ addTodo }) => {\n  const [value, setValue] = useState(\"\");\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (!value) return;\n    addTodo(value);\n    setValue(\"\");\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        className=\"input\"\n        placeholder=\"Enter anything, todos, notes, secrets, anything! (max 45)\"\n        maxLength=\"45\"\n        autoFocus\n        value={value}\n        onChange={e => setValue(e.target.value)}\n      />\n    </form>\n  );\n};\n\nexport default TodoForm;\n","import axios from 'axios';\n\nexport default {\n    get: axios.get,\n    put: axios.put,\n    post: axios.post,\n    delete: axios.delete\n}","import http from \"./httpServices\";\n\nconst endpoint = \"/api/vaults\";\n\nexport const postVault = async vault => {\n  return await http.post(endpoint, vault);\n};\n\nexport const validateUserHash = async userHash => {\n  return await http.get(`${endpoint}/${userHash}`);\n};\n\nexport const getVault = async auth => {\n  return await http.get(`${endpoint}/get/${auth}`);\n};\n\nexport const updateVault = async (auth, data) => {\n  return await http.put(`${endpoint}/${auth}`, data);\n}\n","import React, { useState, useEffect } from \"react\";\nimport TodoItem from \"./todoItem\";\nimport TodoForm from \"./todoForm\";\nimport CryptoJS from \"crypto-js\";\nimport nanoid from 'nanoid';\nimport { updateVault } from \"../services/vaultServices\";\nconst { AES } = CryptoJS;\n\nconst Todo = (props) => {\n  const [todos, setTodos] = useState([]);\n\n  useEffect(() => {\n    const { vault, vaultKey } = JSON.parse(\n      localStorage.getItem(\"currentVault\")\n    );\n\n    // Decrypt & Parse\n    const todos = JSON.parse(\n      AES.decrypt(vault, vaultKey).toString(CryptoJS.enc.Utf8)\n    );\n\n    setTodos(todos);\n  }, []);\n\n  const saveVault = async (todos) => {\n    let { auth, vault, vaultKey } = JSON.parse(\n      localStorage.getItem(\"currentVault\")\n    );\n\n    vault = AES.encrypt(JSON.stringify(todos), vaultKey).toString();\n\n    try {\n      await updateVault(auth, { auth, vault });\n      localStorage.setItem(\n        \"currentVault\",\n        JSON.stringify({ auth, vault, vaultKey })\n      );\n    } catch (ex) {\n      alert(ex);\n    }\n  }\n\n  const addTodo = title => {\n    const todo = {\n      _id: nanoid(8),\n      title,\n      completed: false\n    }\n    const newTodos = [...todos, todo];\n    setTodos(newTodos);\n\n    saveVault(newTodos);\n  };\n\n  const completeTodo = _id => {\n    const newTodos = [...todos];\n    let todo = newTodos.find(t => t._id === _id);\n    todo.completed = true;\n    setTodos(newTodos);\n\n    saveVault(newTodos);\n  };\n\n  const removeTodo = _id => {\n    const newTodos = [...todos];\n    const todo = newTodos.find(t => t._id === _id);\n    newTodos.splice(newTodos.indexOf(todo), 1);\n    setTodos(newTodos);\n\n    saveVault(newTodos);\n  };\n\n  const deleteVault = () => {\n    localStorage.removeItem('currentVault');\n  }\n\n  return (\n    <React.Fragment>\n      {todos.map((todo, index) => (\n        <TodoItem\n          key={index}\n          todo={todo}\n          completeTodo={completeTodo}\n          removeTodo={removeTodo}\n        />\n      ))}\n      <TodoForm addTodo={addTodo} />\n      <a onClick={deleteVault} href=\"/login\"><small>Exit Vault</small></a>\n    </React.Fragment>\n  );\n};\n\nexport default Todo;\n","import React, { useState } from \"react\";\nimport { getVault } from \"../services/vaultServices\";\nimport CryptoJS from \"crypto-js\";\nconst { SHA256 } = CryptoJS;\n\nconst Login = (props) => {\n  const [userName, setUserName] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    const vaultKey = SHA256(userName + password).toString();\n    const auth = SHA256(vaultKey + password).toString();\n\n    try {\n      const { data: vaultAccount } = await getVault(auth);\n      const { vault } = vaultAccount;\n  \n      saveVault({auth, vaultKey, vault})\n  \n      window.location.replace(\"/vault\");\n    }catch(ex){\n      alert(\"Vault not found\");\n    }\n\n  };\n\n  const saveVault = (vault) => {\n    vault = JSON.stringify(vault);\n\n    localStorage.setItem('currentVault', vault);\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        className=\"input mb\"\n        placeholder=\"Username\"\n        value={userName}\n        onChange={e => setUserName(e.target.value)}\n        autoFocus\n      />\n\n      <input\n        type=\"password\"\n        className=\"input mb\"\n        placeholder=\"Password\"\n        value={password}\n        onChange={e => setPassword(e.target.value)}\n      />\n\n      <input className=\"submit\" type=\"submit\" value=\"Open Vault\" />\n      <a href=\"/register\"><small>Don't have a vault yet?</small></a>\n    </form>\n  );\n};\n\nexport default Login;\n","import React, { useState } from \"react\";\nimport CryptoJS from \"crypto-js\";\nimport nanoid from 'nanoid';\nimport { postVault, validateUserHash } from \"../services/vaultServices\";\nconst { SHA256, AES } = CryptoJS;\n\nconst Register = props => {\n  const [userName, setUserName] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    const userHash = SHA256(userName).toString();\n    const { data: alreadyExists } = await validateUserHash(userHash);\n    if (alreadyExists) return alert(\"Vault with username already exists.\");\n\n\n\n    const vaultKey = SHA256(userName + password).toString();\n    const auth = SHA256(vaultKey + password).toString();\n    const vault = AES.encrypt(\n      JSON.stringify([\n        {_id: nanoid(8), title: \"Welcome to VaultSafe\"},\n        {_id: nanoid(8), title: \"Your secrets are safe on the cloud!\"}\n      ]),\n      vaultKey\n    ).toString();\n\n    const data = {\n      userHash,\n      auth,\n      vault\n    };\n\n    try {\n      await postVault(data);\n      alert(\"Vault created\");\n      props.history.push(\"/login\");\n    } catch (ex) {\n      alert(ex);\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        className=\"input mb\"\n        placeholder=\"Username\"\n        value={userName}\n        onChange={e => setUserName(e.target.value)}\n        autoFocus\n      />\n\n      <input\n        type=\"password\"\n        className=\"input mb\"\n        placeholder=\"Password\"\n        value={password}\n        onChange={e => setPassword(e.target.value)}\n      />\n\n      <input className=\"submit\" type=\"submit\" value=\"Create Vault\" />\n      <a href=\"/login\"><small>Already have a vault?</small></a>\n    </form>\n  );\n};\n\nexport default Register;\n","import React from \"react\";\n\nconst Footer = () => {\n  return (\n    <footer className=\"container\">\n      <small>VaultSafe | About</small>\n    </footer>\n  );\n};\n\nexport default Footer;\n","import React from \"react\";\nimport \"./App.css\";\nimport Todo from \"./components/todo.jsx\";\nimport { Route, Switch, Redirect } from \"react-router-dom\";\nimport Login from \"./components/login\";\nimport Register from \"./components/register\";\nimport Footer from \"./components/footer\";\n\nconst App = () => {\n  const checkCurrVault = () => {\n    return Boolean(localStorage.getItem(\"currentVault\"));\n  };\n\n  return (\n    <div className=\"app\">\n      <div className=\"container\">\n        {checkCurrVault() ? (\n          <Switch>\n            <Route path=\"/vault\" component={Todo} />\n            <Redirect from=\"/\" to=\"/vault\" />\n          </Switch>\n        ) : (\n          <Switch>\n            <Route path=\"/login\" component={Login} />\n            <Route path=\"/register\" component={Register} />\n            <Redirect form=\"/vault\" exact to=\"/login\" />\n          </Switch>\n        )}\n      </div>\n\n      <Footer />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}